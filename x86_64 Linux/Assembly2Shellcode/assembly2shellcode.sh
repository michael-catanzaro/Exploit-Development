# Script to convert x64_86 linux assembly to shellcode
# Inspiration taken from 32bit version here: https://vellosec.net/blog/exploit-dev/simple-x86-assembly-to-shellcode-script/

#!/bin/bash
INFO='\033[0;34m'
ERROR='\033[0;31m'
CLEAR='\033[0m'

if [ $# -eq 0 ]
then
        printf "${ERROR}[*]${CLEAR} Script ran with no arguments. Please specify an assembly file. ${ERROR}[*]${CLEAR}\n"
        exit 1
fi

printf "${INFO}[*]${CLEAR} Assembling shell.asm with nasm ${INFO}[*]${CLEAR}\n\n"
nasm -f elf64 -o $1.o $1
printf "${INFO}[*]${CLEAR} Running linker ${INFO}[*]${CLEAR}\n\n"
ld -m elf_x86_64 -o $1.bin $1.o
printf "${INFO}[*]${CLEAR} Converting assembly to shellcode ${INFO}[*]${CLEAR}\n"
for i in $(objdump -d ./$1.bin |grep "^ " |cut -f2); do echo -n '\x'$i >> shellcode.txt; done; echo
cat shellcode.txt
printf "\n\n${INFO}[*]${CLEAR} Reading number of bytes ${INFO}[*]${CLEAR}\n\n"
file=shellcode.txt
total=$(cat $file |sed 's|[\\x]||g' |wc -c);
divisor=2
printf "$((total / divisor))\n\n"
rm shellcode.txt
printf "${INFO}[*]${CLEAR} Done ${INFO}[*]${CLEAR}\n"
